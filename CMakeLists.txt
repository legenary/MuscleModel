cmake_minimum_required( VERSION 3.10 )
SET(MSVC_INCREMENTAL_DEFAULT ON)
PROJECT(Apps_MuscleModel CXX)

IF (NOT CMAKE_BUILD_TYPE)
	SET(CMAKE_BUILD_TYPE "Debug")
	# SET(CMAKE_BUILD_TYPE "Release")
ENDIF (NOT CMAKE_BUILD_TYPE)

OPTION(USE_MSVC_INCREMENTAL_LINKING "Use MSVC Incremental Linking" OFF)
#statically linking VC++ isn't supported for WindowsPhone/WindowsStore
IF (CMAKE_SYSTEM_NAME STREQUAL WindowsPhone OR CMAKE_SYSTEM_NAME STREQUAL WindowsStore)
	OPTION(USE_MSVC_RUNTIME_LIBRARY_DLL "Use MSVC Runtime Library DLL (/MD or /MDd)" ON)
ELSE ()
	OPTION(USE_MSVC_RUNTIME_LIBRARY_DLL "Use MSVC Runtime Library DLL (/MD or /MDd)" OFF)
ENDIF (CMAKE_SYSTEM_NAME STREQUAL WindowsPhone OR CMAKE_SYSTEM_NAME STREQUAL WindowsStore)
OPTION(USE_MSVC_RELEASE_RUNTIME_ALWAYS "Use MSVC Release Runtime Library even in Debug" OFF)
IF(MSVC)
	MESSAGE("Microsoft Visual C++")
	IF (NOT USE_MSVC_INCREMENTAL_LINKING)
		#MESSAGE("MSVC_INCREMENTAL_DEFAULT"+${MSVC_INCREMENTAL_DEFAULT})
		SET( MSVC_INCREMENTAL_YES_FLAG "/INCREMENTAL:NO")

		STRING(REPLACE "INCREMENTAL:YES" "INCREMENTAL:NO" replacementFlags "${CMAKE_EXE_LINKER_FLAGS_DEBUG}")
		SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "/INCREMENTAL:NO ${replacementFlags}" )
		MESSAGE("CMAKE_EXE_LINKER_FLAGS_DEBUG=${CMAKE_EXE_LINKER_FLAGS_DEBUG}")

		STRING(REPLACE "INCREMENTAL:YES" "INCREMENTAL:NO" replacementFlags2 "${CMAKE_EXE_LINKER_FLAGS}")

		SET(CMAKE_EXE_LINKER_FLAGS ${replacementFlag2})
		STRING(REPLACE "INCREMENTAL:YES" "" replacementFlags3 "${CMAKE_EXTRA_LINK_FLAGS}")

		SET(CMAKE_EXTRA_LINK_FLAGS ${replacementFlag3})


		STRING(REPLACE "INCREMENTAL:YES" "INCREMENTAL:NO" replacementFlags3 "${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO}")
		SET(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO ${replacementFlags3})
		SET(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "/INCREMENTAL:NO ${replacementFlags3}" )

	ENDIF (NOT USE_MSVC_INCREMENTAL_LINKING)

	IF (NOT USE_MSVC_RUNTIME_LIBRARY_DLL)
		#We statically link to reduce dependencies
		FOREACH(flag_var CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO )
			IF(${flag_var} MATCHES "/MD")
				STRING(REGEX REPLACE "/MD" "/MT" ${flag_var} "${${flag_var}}")
			ENDIF(${flag_var} MATCHES "/MD")
			IF(${flag_var} MATCHES "/MDd")
				STRING(REGEX REPLACE "/MDd" "/MTd" ${flag_var} "${${flag_var}}")
			ENDIF(${flag_var} MATCHES "/MDd")
		ENDFOREACH(flag_var)
	ENDIF (NOT USE_MSVC_RUNTIME_LIBRARY_DLL)

	IF (USE_MSVC_RELEASE_RUNTIME_ALWAYS)
		FOREACH(flag_var CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO )
			IF(${flag_var} MATCHES "/MDd")
				STRING(REGEX REPLACE "/MDd" "/MD" ${flag_var} "${${flag_var}}")
			ENDIF(${flag_var} MATCHES "/MDd")
			IF(${flag_var} MATCHES "/MTd")
				STRING(REGEX REPLACE "/MTd" "/MT" ${flag_var} "${${flag_var}}")
			ENDIF(${flag_var} MATCHES "/MTd")
			# Need to remove _DEBUG too otherwise things like _ITERATOR_DEBUG_LEVEL mismatch
			IF(${flag_var} MATCHES "-D_DEBUG")
				STRING(REGEX REPLACE "-D_DEBUG" "" ${flag_var} "${${flag_var}}")
			ENDIF(${flag_var} MATCHES "-D_DEBUG")
		ENDFOREACH(flag_var)
	ENDIF (USE_MSVC_RELEASE_RUNTIME_ALWAYS)

	IF (CMAKE_CL_64)
	  ADD_DEFINITIONS(-D_WIN64)
	ELSE()
	  OPTION(USE_MSVC_SSE "Use MSVC /arch:sse option"	OFF)
	  option(USE_MSVC_SSE2 "Compile your program with SSE2 instructions" ON)

	  IF (USE_MSVC_SSE)
		  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /arch:SSE")
	  ENDIF()
	  IF (USE_MSVC_SSE2)
		  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /arch:SSE2")
	  ENDIF()

	ENDIF()

	option(USE_MSVC_AVX "Compile your program with AVX instructions"  OFF)

	IF(USE_MSVC_AVX)
		add_definitions(/arch:AVX)
	ENDIF()

	OPTION(USE_MSVC_FAST_FLOATINGPOINT "Use MSVC /fp:fast option"	ON)
	IF (USE_MSVC_FAST_FLOATINGPOINT)
		  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /fp:fast")
  ENDIF()

	OPTION(USE_MSVC_STRING_POOLING "Use MSVC /GF string pooling option"	ON)
	IF (USE_MSVC_STRING_POOLING)
		SET(CMAKE_C_FLAGS "/GF ${CMAKE_C_FLAGS}")
		SET(CMAKE_CXX_FLAGS "/GF ${CMAKE_CXX_FLAGS}")
	ENDIF()

	OPTION(USE_MSVC_FUNCTION_LEVEL_LINKING "Use MSVC /Gy function level linking option"	ON)
	IF(USE_MSVC_FUNCTION_LEVEL_LINKING)
		SET(CMAKE_C_FLAGS "/Gy ${CMAKE_C_FLAGS}")
		SET(CMAKE_CXX_FLAGS "/Gy ${CMAKE_CXX_FLAGS}")
		set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} /OPT:REF")
		set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /OPT:REF")
	ENDIF(USE_MSVC_FUNCTION_LEVEL_LINKING)

	OPTION(USE_MSVC_EXEPTIONS "Use MSVC C++ exceptions option"	OFF)



	OPTION(USE_MSVC_COMDAT_FOLDING "Use MSVC /OPT:ICF COMDAT folding option"	ON)

	IF(USE_MSVC_COMDAT_FOLDING)
		set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} /OPT:ICF")
		set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /OPT:ICF")
	ENDIF()

	OPTION(USE_MSVC_DISABLE_RTTI "Use MSVC /GR- disabled RTTI flags option"	ON)
	IF(USE_MSVC_DISABLE_RTTI)
	  STRING(REGEX REPLACE "/GR" "" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS}) # Disable RTTI
		SET(CMAKE_C_FLAGS "/GR- ${CMAKE_C_FLAGS}")
		SET(CMAKE_CXX_FLAGS "/GR- ${CMAKE_CXX_FLAGS}")
	ENDIF(USE_MSVC_DISABLE_RTTI)

	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4244 /wd4267")
ENDIF(MSVC)


FIND_PACKAGE(OpenGL)
IF (OPENGL_FOUND)
	MESSAGE("OPENGL FOUND")
	MESSAGE(${OPENGL_LIBRARIES})
ELSE (OPENGL_FOUND)
	MESSAGE("OPENGL NOT FOUND")
	SET(OPENGL_gl_LIBRARY opengl32)
	SET(OPENGL_glu_LIBRARY glu32)
ENDIF (OPENGL_FOUND)

# SET(CMAKE_INCLUDE_PATH ${CMAKE_INCLUDE_PATH} "C:/Program\ Files/Boost/boost_1_55_0/PREFIX/include")
# SET(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} "C:/Program\ Files/Boost/boost_1_55_0/PREFIX/lib")
# LINK_DIRECTORIES(${CMAKE_LIBRARY_PATH})
# find_package(Boost)
# IF (Boost_FOUND)
#     INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIR})
#     MESSAGE(${Boost_INCLUDE_DIR})
# ENDIF()


IF (WIN32)
    INCLUDE_DIRECTORIES(
        ${BULLET_SOURCE_DIR}/btgui/OpenGLWindow/GlewWindows
        ${BULLET_SOURCE_DIR}/examples/OpenGLWindow/SimpleOpenGL3App.cpp
    )
    ADD_DEFINITIONS(-DGLEW_STATIC)
	LINK_LIBRARIES( ${OPENGL_gl_LIBRARY} ${OPENGL_glu_LIBRARY} )
	MESSAGE("Win32 Setting finished.")
ELSE(WIN32)
    IF(APPLE)
    	MESSAGE("Apple")
        find_library(COCOA NAMES Cocoa)
        MESSAGE(${COCOA})
        link_libraries(${COCOA} ${OPENGL_gl_LIBRARY} ${OPENGL_glu_LIBRARY})

    ELSE(APPLE)
        INCLUDE_DIRECTORIES(
            ${BULLET_SOURCE_DIR}/btgui/OpenGLWindow/GlewWindows
            ${BULLET_SOURCE_DIR}/examples/OpenGLWindow
        )
        ADD_DEFINITIONS("-DGLEW_INIT_OPENGL11_FUNCTIONS=1")
        ADD_DEFINITIONS("-DGLEW_STATIC")
        ADD_DEFINITIONS("-DGLEW_DYNAMIC_LOAD_ALL_GLX_FUNCTIONS=1")

        LINK_LIBRARIES(  pthread ${DL} )
    ENDIF(APPLE)
ENDIF(WIN32)

LIST(APPEND CMAKE_PROGRAM_PATH
	Dependencies/ffmpeg-4.4.1-essentials_build/bin
)

INCLUDE_DIRECTORIES(
	include
	bullet3/
    bullet3/src
    bullet3/examples
    bullet3/Extras
    ${OPENGL_INCLUDE_DIRS}
	${GLUT_INCLUDE_DIRS}
)


SET(BULLETLIB_DIR ${CMAKE_CURRENT_SOURCE_DIR}/bullet3/build/lib/Debug)
SET(FFMPEGLIB_DIR ${CMAKE_CURRENT_SOURCE_DIR}/Dependencies/FFmpeg/lib/x64/Debug)
LINK_DIRECTORIES(
	${BULLETLIB_DIR}
	)

# ADD_SUBDIRECTORY(${BULLETLIB_DIR}/bullet3)
# SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${BULLETLIB_DIR})
# SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${BULLETLIB_DIR})


SET(SOURCE
	src/main.cpp
	src/Simulation.cpp
	src/Parameter.cpp
	src/Utility.cpp
	src/MystacialPad.cpp
	src/Follicle.cpp
	src/my_pch.cpp
	src/Fiber.cpp
	src/Tissue.cpp
	src/IntrinsicMuscle.cpp
	src/ExtrinsicMuscle.cpp
	src/myGeneric6DofMuscleConstraint.cpp
	bullet3/build3/bullet.rc
)

SET(HEADERS
 	include/Simulation.h
 	include/Parameter.h
 	include/Utility.h
 	include/MystacialPad.h
 	include/Follicle.h
 	include/Fiber.h
 	include/Tissue.h
 	include/my_pch.h
 	include/IntrinsicMuscle.h
 	include/ExtrinsicMuscle.h
 	include/myGeneric6DofMuscleConstraint.h
)

ADD_EXECUTABLE(MuscleModel
    ${SOURCE}
    ${HEADERS}
)


TARGET_LINK_LIBRARIES(MuscleModel
	Bullet3Common_Debug
    BulletDynamics_Debug
    BulletCollision_Debug
    LinearMath_Debug
    OpenGLWindow_Debug
    BulletExampleBrowserLib_Debug
    ${CMAKE_DL_LIBS}
	${OPENGL_gl_LIBRARY} 
    ${OPENGL_glu_LIBRARY}
)


IF (INTERNAL_ADD_POSTFIX_EXECUTABLE_NAMES)
            SET_TARGET_PROPERTIES(MuscleModel PROPERTIES  DEBUG_POSTFIX "_Debug")
            SET_TARGET_PROPERTIES(MuscleModel PROPERTIES  MINSIZEREL_POSTFIX "_MinsizeRel")
            SET_TARGET_PROPERTIES(MuscleModel PROPERTIES  RELWITHDEBINFO_POSTFIX "_RelWithDebugInfo")
ENDIF(INTERNAL_ADD_POSTFIX_EXECUTABLE_NAMES)




